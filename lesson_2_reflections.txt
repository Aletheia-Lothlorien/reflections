When I initialize a git repository, it doesn't create any commits. I will have untracked files,
if there were any files in the directory already, and I must decide whether to add them to the
staging area and commit them.

The staging area serves as a bridge between my working directory and the repository.
Everything is stored in my working directory, so I take them out and lay them bare so that I can
assess what goes where. Once I've decided what to add and what to remove, then I can commit them
to the repository. The staging area is workspace and a buffer.

The staging area also helps to break apart larger changes. If I have a few different files that
need to be committed, but they regard logically separate chunks, I can commit them incrementally
via the staging area to ensure that all commits a are clear, concise, and informative.

When I wish to experiment with some feature, approach it from a different angle, or maintain an alternate universe, I could create branches of the repository tree. There I'm free to do what I like without affecting the master branch. If I so choose I could then merge the branches to consolidate the changes.

Visualizing the history tree, with its branches and indications of parents, helps to consolidate
and understanding of the process.

When two branches are merged, a new commit is created that now has 2 parents, one from each branch.
If, for example, a side branch is merged into master, and then the side branch is "deleted", it is
only the "label" for the side branch that is deleted. The entire history remains and is reachable
via master's history.
